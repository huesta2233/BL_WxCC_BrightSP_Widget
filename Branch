<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>WxCC Crossâ€‘Launch Button</title>
  <!--
    HOW THIS WORKS
    1) Host this file (e.g., https://yourdomain/path/wxcc-crosslaunch.html)
    2) Add it to Webex Contact Center Desktop as a Custom Widget (iframe web component).
    3) The button opens a new browser tab to the URL you set below or pass via ?url=...

    NOTES
    - The desktop must allow popups from this widget. WxCC typically iframes widgets
      with sandbox that includes "allow-popups". If your layout blocks it, enable popups.
    - For security, we use target="_blank" with rel="noopener noreferrer".
    - You can set a fixed URL in DEFAULT_URL or pass one at runtime using the query string.
      Example:  .../wxcc-crosslaunch.html?url=https%3A%2F%2Fadmin.webex.com
    - Optional: set label= to change button text; icon=none to hide emoji.
  -->
  <style>
    :root {
      --accent: #0f62fe; /* Webex-ish blue */
      --accent-hover: #0353e9;
      --bg: #ffffff;
      --fg: #1a1a1a;
      --radius: 12px;
    }
    html, body { height: 100%; margin: 0; background: var(--bg); color: var(--fg); font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji"; }
    .wrap { height: 100%; display: grid; place-items: center; padding: 16px; }
    .card { width: 100%; max-width: 560px; border: 1px solid #e5e7eb; border-radius: var(--radius); padding: 20px; box-shadow: 0 8px 24px rgba(0,0,0,.06); }
    h1 { font-size: 18px; margin: 0 0 12px; }
    p { margin: 0 0 16px; color: #475569; font-size: 14px; }
    .row { display:flex; gap:10px; align-items:center; }
    .url { flex:1; padding: 10px 12px; border: 1px solid #d1d5db; border-radius: 10px; font-size: 14px; }
    .btn {
      appearance: none; border: 0; border-radius: 999px; padding: 12px 18px; font-weight: 600; font-size: 14px;
      background: var(--accent); color: white; cursor: pointer; transition: background .15s ease, transform .02s ease;
      display: inline-flex; align-items: center; gap: 8px; text-decoration: none;
    }
    .btn:active { transform: translateY(1px); }
    .btn:hover { background: var(--accent-hover); }
    .meta { margin-top: 10px; font-size: 12px; color: #6b7280; }
  </style>
</head>
<body>
  <div class="wrap">
    <div class="card">
      <h1 id="title">Crossâ€‘launch</h1>
      <p id="desc">Open the target in a new browser tab from within the Webex Contact Center desktop.</p>

      <div class="row" style="margin-bottom:12px;">
        <input id="urlInput" class="url" type="url" placeholder="https://example.com" />
        <!--
          Using <a target="_blank"> ensures the new tab is created by the browser.
          We set the href justâ€‘inâ€‘time to honor runtime URL changes.
        -->
        <a id="launchBtn" class="btn" target="_blank" rel="noopener noreferrer">
          <span id="icon">ðŸ”—</span>
          <span id="label">Launch</span>
        </a>
      </div>

      <div class="meta" id="meta"></div>
    </div>
  </div>

  <script>
    // ------- Configuration -------
    const DEFAULT_URL = "https://admin.webex.com/"; // change if you want a fixed default

    // ------- Helpers -------
    const qs = new URLSearchParams(window.location.search);
    const getParam = (k, fallback = "") => (qs.has(k) ? qs.get(k) : fallback);

    const urlInput = document.getElementById('urlInput');
    const launchBtn = document.getElementById('launchBtn');
    const label = document.getElementById('label');
    const icon = document.getElementById('icon');
    const meta = document.getElementById('meta');

    // Initialize from query params (url=, label=, icon=none)
    const initialUrl = getParam('url', DEFAULT_URL);
    const buttonLabel = getParam('label', 'Launch');
    const hideIcon = getParam('icon', '').toLowerCase() === 'none';

    label.textContent = buttonLabel;
    if (hideIcon) icon.style.display = 'none';

    function sanitizeUrl(u) {
      try {
        const parsed = new URL(u);
        return parsed.href;
      } catch (e) {
        return '';
      }
    }

    function setHrefFromInput() {
      const safe = sanitizeUrl(urlInput.value || initialUrl);
      launchBtn.setAttribute('href', safe || '#');
      meta.textContent = safe ? `Will open: ${safe}` : 'Please enter a valid https:// URL';
      launchBtn.style.pointerEvents = safe ? 'auto' : 'none';
      launchBtn.style.opacity = safe ? '1' : '.6';
    }

    urlInput.addEventListener('input', setHrefFromInput);
    urlInput.value = initialUrl;
    setHrefFromInput();

    // Extra safety: if the iframe blocks target="_blank", fall back to window.open
    launchBtn.addEventListener('click', function(ev) {
      const href = launchBtn.getAttribute('href');
      if (!href || href === '#') { ev.preventDefault(); return; }

      // If the browser prevented the <a> from opening a tab, try programmatic open.
      const win = window.open(href, '_blank', 'noopener');
      if (!win) {
        // As a last resort, simulate user click on a temporary anchor (still may be blocked by policy)
        const a = document.createElement('a');
        a.href = href; a.target = '_blank'; a.rel = 'noopener noreferrer';
        document.body.appendChild(a); a.click(); a.remove();
      }
    });

    // Optional: listen for messages from parent (Agent Desktop) to update URL dynamically
    window.addEventListener('message', (event) => {
      // You could verify event.origin against a whitelist for security
      try {
        const { type, url, label: lbl } = event.data || {};
        if (type === 'wxcc:setUrl' && typeof url === 'string') {
          urlInput.value = url; setHrefFromInput();
        }
        if (type === 'wxcc:setLabel' && typeof lbl === 'string') {
          label.textContent = lbl;
        }
      } catch (e) {}
    });
  </script>
</body>
</html>
